package communication;

import gameInterface.GameUpdatePanel;
import gameInterface.inGame;


import info.clearthought.layout.TableLayout;

import java.awt.Container;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
import java.util.concurrent.ArrayBlockingQueue;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JScrollPane;
import javax.swing.ListSelectionModel;

import boardEngine.BoardModel;
import boardEngine.HostBoardGUI;
import boardEngine.HostBoardModel;
import boardEngine.OpponentBoardGUI;
import boardEngine.OpponentBoardModel;
import boardEngine.TextShipSetup;

//import startingInterface.InitialFrame;
import startingInterface.InitialPanel;
import startingInterface.PendingPanel;
import startingInterface.SetUp;
import startingInterface.AcceptDenyPanel;

import communication.ClientManager.States;

import datatypes.Message;
import datatypes.SHAHash;
import datatypes.SendReceiveProtocol;
import datatypes.Ship;
import datatypes.TestVictory;

/**
 * ClientManager threads handle all user interaction with the game
 * @author Zach
 *
 */
public class ClientManager implements Runnable {
	BufferedReader reader;
	PrintWriter writer;
	Socket socket;
	
	JFrame gameFrame;
	
	Map<ClientManager.States,ArrayList<Integer> > stateMessageTypeMap;
	Map<ClientManager.States,ArrayList<Integer> > stateSendMessageTypeMap;
	
	boolean initiator;
	//States for player A
	
	HostBoardModel hostBoardModel;
	OpponentBoardModel opponentBoardModel;
	
	HostBoardGUI hostBoardGUI;
	OpponentBoardGUI opponentBoardGUI;
	
	ArrayBlockingQueue<Message> sendMessageQueue;
	
	String opponentHash;
	
	public enum States {
		A_CONNECTED, A_PEND_ACCEPT, A_PREP_HASH, A_AWAIT_HASH,
		MY_TURN,PEND_UPDATE, CALC_RESULTS,YOUR_TURN,AWAIT_VICTORY,CALC_VICTORY,VICTORY,CONTESTED,B_CONNECTED,
		B_PEND_ACCEPT,B_AWAIT_HASH, B_PREP_HASH,LOSS;
	}

	//
	public static final int INIT = 0;
	public static final int SHIP_LAYOUT = 1;
	public static final int PLAY = 2;
	
	//Opponent modes
	public static final int MANUAL = 0;
	public static final int BASIC_AI = 1;
	
	AIPlayer aiPlayer;
	
	//Current state of game for this player
	private States currentGameState;
	
	public SendReceiveProtocol protocol;
	
	int salt = 0;
	public GameUpdatePanel gameUpdatePanel;
	boolean ai;
	private int delay;
	
	public ClientManager(BufferedReader reader, PrintWriter writer, Socket
			socket,boolean initiator,boolean ai) {
		this.reader = reader;
		this.writer = writer;
		this.socket = socket;
		this.initiator = initiator;
		this.ai = ai;
		sendMessageQueue= new ArrayBlockingQueue<Message>(10);
		
		if (this.initiator) {currentGameState = States.A_CONNECTED;}
		else {currentGameState = States.B_CONNECTED; }
		
		protocol = new SendReceiveProtocol();
		
		this.stateMessageTypeMap = protocol.stateMessageTypeMap;
		this.stateSendMessageTypeMap = protocol.stateSendMessageTypeMap;
	}

	/**
	 * @effects calls all anti-cheating checks to determine whether the opponent, having declared victory, actually did win
	 * @param finalBoardState
	 * @param salt
	 * @return
	 */
	public boolean verifyVictory(String finalBoardState,int salt) {
		System.out.println(finalBoardState);
		System.out.printf("rows: %d; columns: %d, salt: %d",this.hostBoardModel.getHeight(),this.hostBoardModel.getWidth(),salt);
		String finalHash = SHAHash.computeBoardHash(finalBoardState, this.hostBoardModel.getHeight(), this.hostBoardModel.getWidth(), salt);
		System.out.println(this.opponentHash);
		System.out.println(finalHash);
		//First check; are the hashes identical?
		if (!finalHash.equals(this.opponentHash)) {
			System.out.println("unequal hashes");
			return false;
		}
		
//		if (!TestVictory.validBoardPlacement(finalBoardState, opponentBoardModel)) {
//			System.out.println("invalid board placement");
//			return false;
//		}
//		
//		if (!TestVictory.congruentWithCommunication(finalBoardState, opponentBoardModel)) {
//			System.out.println("incongruent with communication");
//			return false;
//		}
		return true;
	}
	
	
	/**
	 * @requires a String object representing opponent's board-hash
	 * @modifies this.opponentHash
	 * @param hashText
	 * @effects stores the board-hash sent by the opponent.
	 */
	public void setOpponentHash(String hashText) {
		this.opponentHash = hashText;
	}
	
	/**
	 * @effects returns the opponent's board hash for use in anti-cheating
	 * @return the opponent's board hash
	 */
	public String getOpponentHash() {
		return this.opponentHash;
	}
	
	/**
	 * @effects creates the hostBoardModel and opponentBoardModel
	 * This is called after initializing a game with the opponent, as the information is needed in boardSetup
	 * @modifies the hostBoardModel and opponentBoardModel; this.aiPlayer (creates a new instance of AIPlayer with the hostBoardModel
	 * @requires none
	 * @param width
	 * @param height
	 * @param shipSizes
	 */
	public void setupBoardModels(int width, int height, ArrayList<Integer> shipSizes) {
		//System.out.println(shipSizes);
		
		this.hostBoardModel = new HostBoardModel(width,height,shipSizes);
		this.opponentBoardModel = new OpponentBoardModel(width,height,shipSizes);
		
		if (this.ai) {
			aiPlayer = new AIPlayer(hostBoardModel,opponentBoardModel);
		}
	}
	
	/**
	 * @effects takes a message off the queue; checks to ensure the message is valid
	 * given the current state of the game, and prints it using the PrintWriter
	 * @requires a valid PrintWriter and a valid currentGameState variable (see ClientManager.States for viable states)
	 * @param m, the Message to be sent (see package datatypes)
	 */
	public void sendMessage(Message m){
		
		MessageProcessor mp = new MessageProcessor(this);
		if (m.getOutgoing() == true) {
			for (Integer i : this.stateSendMessageTypeMap.get((getCurrentState()))) {
				if (new Integer(m.getMessageType()).equals(i) ) {
					System.out.println("match! MessageType is: "+i);
					writer.println(m.getMessageText());}
			}
			mp.handleOutgoingMessage(m);
		}
		
		else {
			ArrayList<Integer> viableTypes = this.stateMessageTypeMap.get(this.getCurrentState());
			int j = -1;
			if (viableTypes == null) {
				System.out.println("Associated array list is null");
			}
			
			for (Integer i : viableTypes) {
				boolean validParse = ConstructMessage.isValidMessage(i,m.getMessageText());
				
				if (validParse) {
					j = i;
					System.out.printf("Message: %s is of type: %d \n",m.getMessageText(),i);
					m.setMessageType(j);
				}
			}
			mp.handleIncomingMessage(m);
		}
		
		
	}
	
	/**
	 * @effects the run thread starts threads to read input from the opponent over the socket. 
	 * It manages the ArrayBlockingQueue of messages being sent to the opponent.
	 * It initializes the GUI, which is updated according to changes in game state
	 * @requires a connection to an opponent over which input can be read
	 * @modifies the state of the game and components of the game are updated through host and opponent inputs
	 */
	@Override
	public void run() {
		gameFrame = new JFrame("Waiting for init-game");
		gameFrame.setVisible(true);
		
		gameUpdatePanel = new GameUpdatePanel(this.sendMessageQueue);

		if (this.initiator) {
			gameFrame.setTitle("Game with: "+socket.getInetAddress().getHostAddress());
			gameFrame.setContentPane(new InitialPanel(this));
			
		}
		else {
			gameFrame.setContentPane(new ChatOnlyPanel(this));
		}
	
		gameFrame.pack();
		
		OpponentReader oppRead = new OpponentReader(this.reader,this);
		Thread orThread = new Thread(oppRead);
		CommandReader comRead = new CommandReader(this.sendMessageQueue);
		Thread comrThread = new Thread(comRead);
		//GUIReader guiRead = new CommandReader()
		comrThread.start();
		orThread.start();
		
		
		
		int i = 0;
		while (true) {
			try {
				Message m = sendMessageQueue.take();
				if (m != null) {
					System.out.println(m.getMessageText());
					sendMessage(m);
				}
				
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		// Close streams, socket and socket server.
		
		/*try {
			writer.println("Closing connection... ");
			writer.flush();
			reader.close();
			writer.close();
			socket.close();
		} catch (IOException e) {
			// TODO Auto-genesrated catch block
			e.printStackTrace();
		}*/
	}

	public States getCurrentState() {
		// TODO Auto-generated method stub
		return currentGameState;
	}

	public void setCurrentState(States newState) {
		// TODO Auto-generated method stub
		this.currentGameState = newState;
	}

/**
 * Controls the placement of ships
 */
	public void shipPlacement() {
		/*TextShipSetup ts = new TextShipSetup(this);
		ts.setVisible(true);
		ts.pack();
		ts.setTitle("Ship Placement");*/
		
		if (this.ai) {
			aiPlayer.placeShips();
			
			this.addToQueue(ConstructMessage.makeBoardHashMessage(hostBoardModel.boardRepFromArray(), hostBoardModel.getHeight(), hostBoardModel.getWidth(), hostBoardModel.getSalt()));
			return;
		}
		
		this.hostBoardGUI= new HostBoardGUI(this.hostBoardModel,this.sendMessageQueue);
		gameFrame.setContentPane(new SetUp(this));
		gameFrame.pack();
	}
	
	public boolean isValidSetup() {
		// TODO Auto-generated method stub
		if (this.hostBoardModel.isValidShipSetup())
			return true;
		else return false;
	}
	
	public HostBoardModel getHostBoardModel() {
		if (hostBoardModel == null ) {
			System.out.println("null value for hostBoardModel");
		}
		return this.hostBoardModel;
	}


	public void prepareHash() {
		// TODO Auto-generated method stub
		System.out.println("Done with ship placement");
		this.salt = 0;
		Message boardHash = ConstructMessage.makeBoardHashMessage(hostBoardModel.boardRepFromArray(), hostBoardModel.getHeight(), hostBoardModel.getWidth(), salt);
		System.out.println(boardHash.getMessageText());
		try {
			sendMessageQueue.put(boardHash);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public HostBoardGUI getHostBoardGUI() {
		// TODO Auto-generated method stub
		return hostBoardGUI;
	}

	public OpponentBoardGUI getOpponentBoardGUI() {
		// TODO Auto-generated method stub
		return this.opponentBoardGUI;
	}

	public OpponentBoardModel getOpponentBoardModel() {
		// TODO Auto-generated method stub
		return this.opponentBoardModel;
	}

	public void acceptDenyGame() {
		// TODO Auto-generated method stub
		if (this.ai) {
			this.addToQueue(ConstructMessage.makeGameAcceptMessage());
		}
		
		else {
		if (gameFrame == null) {
			System.out.println("null gameFrame");
		}
		gameFrame.setContentPane(new AcceptDenyPanel(this));
		gameFrame.pack();
		}
	}

	public int getSalt() {
		// TODO Auto-generated method stub
		return this.salt;
	}

	public ArrayBlockingQueue<Message> getSendMessageQueue() {
		// TODO Auto-generated method stub
		return this.sendMessageQueue;
	}

	public void addToQueue(Message makeGameAcceptMessage) {
		// TODO Auto-generated method stub
		this.sendMessageQueue.add(makeGameAcceptMessage);
	}

	public void setDelay(int delay) {
		// TODO Auto-generated method stub
		this.delay = delay;
	}

	public int getDelay() {
		return delay;
	}
}
